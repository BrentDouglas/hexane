/*
 * Copyright (C) 2018 Brent Douglas and other contributors
 * as indicated by the @author tags. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.machinecode.hexane;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/** @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a> */
public class StatementCacheTest extends Assert {

  LRUStatementCache cache;
  Connection conn;

  String sql = "select 1";
  int resultSetType = ResultSet.TYPE_FORWARD_ONLY;
  int resultSetConcurrency = ResultSet.CONCUR_READ_ONLY;
  int resultSetHoldability = ResultSet.CLOSE_CURSORS_AT_COMMIT;
  int autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
  int[] columnIndexes = new int[] {1};
  String[] columnNames = new String[] {"test"};

  int hits;
  int misses;

  @Before
  public void setUp() throws Exception {
    cache =
        new LRUStatementCache(
            4,
            new DelegateInternalListener(
                new HexaneListener() {
                  @Override
                  public void onStatementCacheHit() {
                    hits += 1;
                  }

                  @Override
                  public void onStatementCacheMiss() {
                    misses += 1;
                  }
                }));
    conn = mock(Connection.class);
    when(conn.getHoldability()).thenAnswer(inv -> resultSetHoldability);
    when(conn.prepareStatement(any())).thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareStatement(any(), anyInt())).thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareStatement(any(), anyInt(), anyInt()))
        .thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareStatement(any(), anyInt(), anyInt(), anyInt()))
        .thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareStatement(any(), any(int[].class)))
        .thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareStatement(any(), any(String[].class)))
        .thenAnswer(inv -> mock(PreparedStatement.class));
    when(conn.prepareCall(any())).thenAnswer(inv -> mock(CallableStatement.class));
    when(conn.prepareCall(any(), anyInt(), anyInt()))
        .thenAnswer(inv -> mock(CallableStatement.class));
    when(conn.prepareCall(any(), anyInt(), anyInt(), anyInt()))
        .thenAnswer(inv -> mock(CallableStatement.class));
  }

  @Test
  public void remove() throws SQLException {
    final PreparedStatement a = mock(PreparedStatement.class);
    assertFalse(cache.remove(a));

    final PreparedStatement b = cache.prepareStatement(conn, sql);
    assertTrue(cache.remove(b));
    assertFalse(cache.remove(b));
  }

  @Test
  public void prepareStatementSql() throws SQLException {
    final PreparedStatement a = cache.prepareStatement(conn, sql);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b = cache.prepareStatement(conn, sql);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareStatementSqlTypeConcur() throws SQLException {
    final PreparedStatement a =
        cache.prepareStatement(conn, sql, resultSetType, resultSetConcurrency);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b =
        cache.prepareStatement(conn, sql, resultSetType, resultSetConcurrency);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareStatementSqlTypeConcurHold() throws SQLException {
    final PreparedStatement a =
        cache.prepareStatement(
            conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b =
        cache.prepareStatement(conn, sql, resultSetType, resultSetConcurrency);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareStatementSqlKeys() throws SQLException {
    final PreparedStatement a = cache.prepareStatement(conn, sql, autoGeneratedKeys);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b = cache.prepareStatement(conn, sql, autoGeneratedKeys);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareStatementSqlColIdx() throws SQLException {
    final PreparedStatement a = cache.prepareStatement(conn, sql, columnIndexes);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b = cache.prepareStatement(conn, sql, columnIndexes);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareStatementSqlColNames() throws SQLException {
    final PreparedStatement a = cache.prepareStatement(conn, sql, columnNames);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final PreparedStatement b = cache.prepareStatement(conn, sql, columnNames);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareCallSql() throws SQLException {
    final CallableStatement a = cache.prepareCall(conn, sql);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final CallableStatement b = cache.prepareCall(conn, sql);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareCallSqlTypeConcur() throws SQLException {
    final CallableStatement a = cache.prepareCall(conn, sql, resultSetType, resultSetConcurrency);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final CallableStatement b = cache.prepareCall(conn, sql, resultSetType, resultSetConcurrency);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }

  @Test
  public void prepareCallSqlTypeConcurHold() throws SQLException {
    final CallableStatement a =
        cache.prepareCall(conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    assertEquals(0, hits);
    assertEquals(1, misses);
    final CallableStatement b =
        cache.prepareCall(conn, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    assertEquals(1, hits);
    assertEquals(1, misses);
    assertEquals(a, b);
  }
}
