/*
 * Copyright (C) 2018 Brent Douglas and other contributors
 * as indicated by the @author tags. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.machinecode.hexane;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/** @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a> */
class StatementCache {
  static final StatementCache INSTANCE = new StatementCache();

  boolean remove(final PreparedStatement statement) {
    return false;
  }

  PreparedStatement prepareStatement(final Connection conn, String sql) throws SQLException {
    return conn.prepareStatement(sql);
  }

  PreparedStatement prepareStatement(
      final Connection conn, String sql, int resultSetType, int resultSetConcurrency)
      throws SQLException {
    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
  }

  PreparedStatement prepareStatement(
      final Connection conn,
      String sql,
      int resultSetType,
      int resultSetConcurrency,
      int resultSetHoldability)
      throws SQLException {
    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  PreparedStatement prepareStatement(final Connection conn, String sql, int autoGeneratedKeys)
      throws SQLException {
    return conn.prepareStatement(sql, autoGeneratedKeys);
  }

  PreparedStatement prepareStatement(final Connection conn, String sql, int[] columnIndexes)
      throws SQLException {
    return conn.prepareStatement(sql, columnIndexes);
  }

  PreparedStatement prepareStatement(final Connection conn, String sql, String[] columnNames)
      throws SQLException {
    return conn.prepareStatement(sql, columnNames);
  }

  CallableStatement prepareCall(final Connection conn, String sql) throws SQLException {
    return conn.prepareCall(sql);
  }

  CallableStatement prepareCall(
      final Connection conn, String sql, int resultSetType, int resultSetConcurrency)
      throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
  }

  CallableStatement prepareCall(
      final Connection conn,
      String sql,
      int resultSetType,
      int resultSetConcurrency,
      int resultSetHoldability)
      throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }
}
